/* Definition section */
%{
#include "y.tab.h"	/* header file generated by bison */
extern YYSTYPE yylval; //YYSTYPE
%}

/* Define regular expression label */
newline		[\n]
digit		[0-9]
letter		[a-zA-Z]
integer     {digit}+
double      {digit}+"."{digit}+
id			{letter}+({letter}|{digit})*

%option yylineno

%x COMMENT STRING_STATE

/* Rules section */
%%

 /* Arithmetic */
"+"     {return *yytext; }
"-" 	{return *yytext; }
"*" 	{return *yytext; }
"/" 	{return *yytext; }
"%"     {return *yytext; }
"++"    {return ADDo; }
"--"    {return SUBo; }

 /* Relational */
">"		{return *yytext; }
"<"		{return *yytext; }
">="	{return bigger; }
"<="	{return smaller; }
"=="	{return equal; }
"!="	{ return notequal;}

 /* Assignment */
"="		{return *yytext;}
"+="	{return ADDAs; }
"-="	{return SUBAs; }
"*="	{return MULAs; }
"/="	{return DIVAs; }
"%="	{return REMAs; }

 /* Logical */
"&&"	{ }
"||"	{ }
"!"		{ }

 /* Delimiters */
"("		{return *yytext; }
")"		{return *yytext; }
"{"		{return *yytext; }
"}"		{return *yytext;}

 /* Print Keywords */	
"print"		{return PRINT; }
"println"	{return PRINTLN; }

 /* Condition and Loop Keywords */
"if"		{return IF; }
"else"		{return ELSE; }
"for"		{return FOR; }

 /* Declaration Keywords */
"var"		{return VAR; }
"void"		{return VOID; }
"int"		{return INT; }
"float32"	{return FLOAT; }

 /* String Constant */
\"				        { BEGIN STRING_STATE;}
<STRING_STATE>\"		{ BEGIN INITIAL;}
<STRING_STATE>[^"]*		{ }

 /* Number Constant */
{integer}	{yylval.i_val=atof(yytext);return I_CONST;}
{double}	{yylval.f_val=atof(yytext);return F_CONST; }

 /* C type Comment */
"/*"				{ BEGIN COMMENT; }
<COMMENT>[^*\n]+	{ }
<COMMENT>\n			{ }
<COMMENT>"*"		{ }
<COMMENT>"*/"		{ BEGIN INITIAL; }

 /* C++ type Comment */
\/\/.*	{ }

 /* Variable ID */
 {id}       {yylval.string=yytext[0];return ID; }

 /* others */

"\n"		{return NEWLINE; }
[ \t]		{} /* Ignore */
[^; \t] 	{} /* Ignore other charactor sets */
<<EOF>>     {yyterminate();return 0; }

%%

int yywrap()
{
    return 1;
}
